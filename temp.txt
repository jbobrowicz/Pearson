case function
  when "identity"
    $stdout.write $stdin.read
  when "mean" # should I implement it here ? If yes, when ? 
    i = $stdin.read.split(/\D/)
    x = 0
    i.each do |a|
      x += a.to_i
    end
    $stdout.write x/i.size	
  when "mode"     # mode algorithm
  $stdout.write 3 # d = x0 + ((n0 - n_1) / ((n0 - n_1) + (n0 - n1))) * c0 
  when "median"
  $stdout.write 3
  when "sd"
  $stdout.write 2
  when "dispersion"
  $stdout.write 3
  when "min"
  $stdout.write 1
  when "max"
  $stdout.write 5
  when "range"
  $stdout.write 5
  when "cov"
  $stdout.write 5
  when "perc0"
  $stdout.write 1
  when "perc1"
  $stdout.write 2
  when "perc2"
  $stdout.write 3
  when "perc3"
  $stdout.write 4
  when "perc4"
  $stdout.write 5
  when "ir"
  $stdout.write 3
  when "variance"
  $stdout.write 1
  when "skewness"
  $stdout.write 0
  when "kurtosis"
  $stdout.write 0
  when "moments"
  $stdout.write 0
  when "lmoments"
  $stdout.write 0
  else
    puts "Error: Unsupported function #{function}"
end


   
  @mode
  Scenario: Story #4 - Mode function
    Given input "1,2,3,3,4,5"
    And function "mode"
    When the program is run
    Then the result should be "3"
   
  @sd 
  Scenario: Story #5 - Standard Deviation function
    Given input "1,2,3,3,4,5"
    And function "sd"
    When the program is run
    Then the result should be "2"    
    
  @dispersion
  Scenario: Story #6 - Dispersion function
    Given input "1,2,3,3,4,5"
    And function "dispersion"
    When the program is run
    Then the result should be "3" 
    
  @min
  Scenario: Story #7 - Minimum function
    Given input "1,2,3,3,4,5"
    And function "min"
    When the program is run
    Then the result should be "1"
    
  @max
  Scenario: Story #8 - Maximum function
    Given input "1,2,3,3,4,5"
    And function "max"
    When the program is run
    Then the result should be "5"  
    
  @range
  Scenario: Story #9 - Range function
    Given input "1,2,3,3,4,5"
    And function "range"
    When the program is run
    Then the result should be "5"    
    
  @cov
  Scenario: Story #10 - Coefficient of variation function
    Given input "1,2,3,3,4,5"
    And function "cov"
    When the program is run
    Then the result should be "5" 

# percentile (0-4) 0 => 0%, 1 => 25%, 2 => 50%, 3 => 75%, 4 => 100%

  @perc0
  Scenario: Story #11 - Percentile zero function
    Given input "1,2,3,4,5"
    And function "perc0"
    When the program is run
    Then the result should be "1"     

  @perc1
  Scenario: Story #12 - Percentile first function
    Given input "1,2,3,4,5"
    And function "perc1"
    When the program is run
    Then the result should be "2"    

  @perc2
  Scenario: Story #13 - Percentile second function
    Given input "1,2,3,4,5"
    And function "perc2"
    When the program is run
    Then the result should be "3" 
    
  @perc3
  Scenario: Story #14 - Percentile third function
    Given input "1,2,3,4,5"
    And function "perc3"
    When the program is run
    Then the result should be "4"   
    
  @perc4
  Scenario: Story #15 - Percentile fourth function
    Given input "1,2,3,4,5"
    And function "perc4"
    When the program is run
    Then the result should be "5"    
    
  @ir
  Scenario: Story #16 - Interquartile range function
    Given input "1,2,3,4,5"
    And function "ir"
    When the program is run
    Then the result should be "3"      
     
  @variance
  Scenario: Story #17 - Variance function
    Given input "1,2,3,4,5"
    And function "variance"
    When the program is run
    Then the result should be "1" 
    
  @skewness
  Scenario: Story #18 - Skewness function
    Given input "1,2,3,4,5"
    And function "skewness"
    When the program is run
    Then the result should be "0"     
    
  @kurtosis
  Scenario: Story #19 - Kurtosis function
    Given input "1,2,3,4,5"
    And function "skewness"
    When the program is run
    Then the result should be "0"  
    
  @moments
  Scenario: Story #20 - Moments function
    Given input "1,2,3,4,5"
    And function "moments"
    When the program is run
    Then the result should be "0"     
 
  @lmoments
  Scenario: Story #21 - L-moments function
    Given input "1,2,3,4,5"
    And function "lmoments"
    When the program is run
    Then the result should be "0"     
    
    
     
 
    
